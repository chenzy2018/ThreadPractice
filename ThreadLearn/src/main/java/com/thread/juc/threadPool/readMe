线程池：
    Executor：线程池顶层接口，定义了线程池运行方法execute
        ExecutorService：继承Executor接口，完善了线程池的生命周期
            submit：提交任务，执行时间由线程池控制，异步执行，主线程不需要等待，可以往后执行
            shutdown()：设置线程池的状态，只会中断所有没有执行任务的线程
            shutdownNow()：设置线程池的状态，还会尝试停止正在运行的或者暂停任务的线程

    两种线程池：
        ThreadExecutorPool:
            多个线程共享同一个任务队列

            构造函数：
                    int corePoolSize：线程池中的核心线程数量，<corePoolSize则创建新线程来执行任务，=corePoolSize则将任务加入到阻塞队列
                        使用prestartCoreThread方法，可以预先启动corePoolSize数量的线程
                    int maximumPoolSize：允许的最大线程数数量，BlockingQueue满了的时候，如果corePoolSize<maximumPoolSize的时候，则创建新线程
                    long keepAliveTime：线程存活时间，线程数>corePoolSize才有用(即核心线程不参与存活时间，一直存在，可以通过方法让核心线程参与，但是一般不会这样做)
                    TimeUnit unit：存活时间的单位值
                    BlockingQueue<Runnable> workQueue：存放任务的阻塞队列
                    ThreadFactory threadFactory：构建线程的工厂，用于定义新建线程的名称
                    RejectedExecutionHandler handler：饱和策略，线程数到了最大值且阻塞队列放满的情况的新来任务处理策略
                        AbortPolicy：直接抛出异常，默认
                        CallerRunsPolicy：用提交任务所在线程来执行任务
                        DiscardOldestPolicy：直接丢弃阻塞队列中最老的即最靠前的任务
                        DiscardPolicy：直接丢弃新任务
                        实现自己的饱和策略：实现RejectedExecutionHandler接口即可

        ForkJoinPool:
            分而治之的思想，将大任务fork成小任务，每个小任务的结果再join成最终的结果返回
            一个任务一个任务队列
            适用于CPU密集型系统

    线程池参数定义参考：
        明确三个概念：
            1.tasks，程序每秒需要处理的最大任务数量（假设系统每秒任务数为100~1000）
            2.tasktime，单线程处理一个任务所需要的时间（每个任务耗时0.1秒）
            3.responsetime，系统允许任务最大的响应时间（每个任务的响应时间不得超过2秒）

            corePoolSize：
                每个任务需要tasktime秒处理，则每个线程每秒可处理1/tasktime个任务。系统每秒有tasks个任务需要处理，则需要的线程数为：tasks/(1/tasktime)。
                即tasks*tasktime个线程数。假设系统每秒任务数为100到1000之间，每个任务耗时0.1秒，则需要100x0.1至1000x0.1，即10到100个线程。那么corePoolSize应该设置为大于10。
                具体数字最好根据8020原则，即80%情况下系统每秒任务数，若系统80%的情况下任务数小于200，最多时为1000，则corePoolSize可设置为20。

            maxPoolSize：最大线程数
                当系统负载达到最大值时，核心线程数已无法按时处理完所有任务，这时就需要增加线程。
                每秒200个任务需要20个线程，那么当每秒达到1000个任务时，则需要(1000-queueCapacity)*(20/200)，即60个线程，可将maxPoolSize设置为60。

                以上关于线程数量的计算并没有考虑CPU的情况。若结合CPU的情况，比如，当线程数量达到50时，CPU达到100%，
                则将maxPoolSize设置为60也不合适，此时若系统负载长时间维持在每秒1000个任务，则超出线程池处理能力，应设法降低每个任务的处理时间(tasktime)。

            queueCapacity：队列长度
                任务队列的长度要根据核心线程数，以及系统对任务响应时间的要求有关。
                队列长度可以设置为(corePoolSize/tasktime)responsetime： (20/0.1)2=400，即队列长度可设置为400。

            keepAliveTime：存活时间
                keepAliveTiime设定值可根据任务峰值持续时间来设定
